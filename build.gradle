import org.gradle.internal.jvm.Jvm
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java-library'

    // plugins necessary for publishing to sonatype / mvn central
    id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
    id 'maven-publish'
    id 'signing'
}

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

def platform = 'unknown'
OperatingSystem os = DefaultNativePlatform.currentOperatingSystem;
if (os.isMacOsX()) {
    platform = 'darwin'
} else if (os.isLinux()) {
    platform = 'linux'
} else if (os.isWindows()) {
    platform = 'windows'
}

project.group = 'io.github.mcicu'
project.version = '0.0.1'
ext.projectNameWithPlatform = project.name + '-' + platform

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation fileTree(include: ['*.jar', "*.dylib", "*.so"], dir: 'libs')
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    implementation group: 'org.json', name: 'json', version: '20200518'
    implementation 'io.github.mcicu:antelope-java-sdk:0.0.1'
    implementation 'org.jetbrains:annotations:24.0.1'
}

jar {
    dependsOn 'copyNativeLibrary'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    // Copy lib file before jar is created
    from('antelopejavaabieos/build/lib/main/debug') {
        include '**/*.so'
        include '**/*.dylib'
        into('antelopejavaabieos/build/lib/main/debug')
    }
}

tasks.register('copyNativeLibrary', Copy) {
    dependsOn ':antelopejavaabieos:linkDebug'
    // Copy lib to /resources so tests can run within project (outside of gradle task)
    from('antelopejavaabieos/build/lib/main/debug') {
        include '**/*.so'
        include '**/*.dylib'
    }
    into 'src/main/resources/antelopejavaabieos/build/lib/main/debug'
}

test {
    dependsOn 'copyNativeLibrary'
    systemProperty "java.library.path", file("${project(":antelopejavaabieos").buildDir}/lib/main/debug").absolutePath
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.register('gitSubmodulesUpdate') {
    exec {
        commandLine 'git', 'submodule', 'update', '--init', '--recursive'
    }
}

tasks.register('deleteCopiedNativeLibrary', Delete) {
    dependsOn('gitSubmodulesUpdate')
    delete fileTree(include: ["*.dylib", "*.so"], dir: 'src/main/resources/antelopejavaabieos/build/lib/main/debug')
}

clean.dependsOn 'deleteCopiedNativeLibrary'

tasks.register('sourceJar', Jar) {
    classifier('sources')
    from sourceSets.main.allSource
}

javadoc.failOnError = false
tasks.register('javadocJar', Jar) {
    classifier('javadoc')
    from javadoc
}

artifacts {
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        javaPubl(MavenPublication) {
            groupId project.group
            artifactId project.ext.projectNameWithPlatform
            version project.version

            from components.java
            artifact sourceJar
            artifact javadocJar

            pom {
                name = "ABIEOS Serialization Provider for Antelope Java SDK"
                description = "ABIEOS Serialization Provider for Antelope Java SDK"
                url = "https://github.com/mcicu/antelope-java-abieos-serialization-provider/"
                licenses {
                    license {
                        name = "MIT License"
                        url = "https://github.com/mcicu/antelope-java-abieos-serialization-provider/blob/master/LICENSE"
                    }
                }
                developers {
                    developer {
                        name = "mcicu"
                        email = "cicumihai02@gmail.com"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/mcicu/antelope-java-abieos-serialization-provider.git"
                    developerConnection = "scm:git:git://github.com/mcicu/antelope-java-abieos-serialization-provider.git"
                    url = "https://github.com/mcicu/antelope-java-abieos-serialization-provider"
                }
            }
        }
    }
}

signing {
    required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("publish") }
    sign publishing.publications
}


nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = project.hasProperty("sonatype.username") ? project.property("sonatype.username") : ""
            password = project.hasProperty("sonatype.password") ? project.property("sonatype.password") : ""
        }
    }
}
